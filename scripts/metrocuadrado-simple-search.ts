#!/usr/bin/env ts-node

/**
 * Script de b√∫squeda espec√≠fico para Metrocuadrado
 * Basado en el HTML del archivo text.txt
 * Solo requiere ubicaci√≥n y autom√°ticamente busca arriendos
 */

import puppeteer from 'puppeteer';
import { logger } from '../utils/logger';

interface MetrocuadradoSearchParams {
  location: string;
  propertyType?: string; // apartamento, casa, etc.
}

class MetrocuadradoSimpleSearch {
  
  /**
   * Ejecuta b√∫squeda directa en Metrocuadrado
   */
  async searchRentals(params: MetrocuadradoSearchParams): Promise<void> {
    console.log('üè† B√öSQUEDA SIMPLE EN METROCUADRADO');
    console.log('=' .repeat(50));
    console.log(`üìç Ubicaci√≥n: ${params.location}`);
    console.log(`üè† Tipo: ${params.propertyType || 'Apartamento'}`);
    console.log('üíº Operaci√≥n: Arriendo (fijo)');
    console.log('');

    const browser = await puppeteer.launch({ 
      headless: false, // Mostrar navegador para ver el proceso
      defaultViewport: { width: 1200, height: 800 }
    });

    try {
      const page = await browser.newPage();
      
      // Ir a la p√°gina principal de Metrocuadrado
      console.log('üåê Navegando a Metrocuadrado...');
      await page.goto('https://www.metrocuadrado.com/', { 
        waitUntil: 'networkidle2',
        timeout: 30000 
      });

      // Esperar a que carguen los elementos del formulario
      console.log('‚è≥ Esperando formulario de b√∫squeda...');
      await page.waitForSelector('pt-dropdown[element-id="locationType"]', { timeout: 15000 });

      // Configurar tipo de negocio a "arriendo"
      console.log('üîß Configurando tipo de operaci√≥n: Arriendo...');
      await this.setBusinessType(page, 'arriendo');

      // Configurar ubicaci√≥n
      console.log(`üìç Configurando ubicaci√≥n: ${params.location}...`);
      await this.setLocation(page, params.location);

      // Configurar tipo de propiedad si se especifica
      if (params.propertyType) {
        console.log(`üè† Configurando tipo de propiedad: ${params.propertyType}...`);
        await this.setPropertyType(page, params.propertyType);
      }

      // Hacer clic en buscar
      console.log('üîç Ejecutando b√∫squeda...');
      await this.clickSearch(page);

      // Esperar resultados
      console.log('‚è≥ Esperando resultados...');
      await page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 30000 });

      // Extraer y mostrar resultados
      await this.extractAndDisplayResults(page);

    } catch (error) {
      console.error('‚ùå Error en la b√∫squeda:', error);
      logger.error('Metrocuadrado simple search failed:', error);
    } finally {
      console.log('üîí Cerrando navegador...');
      await browser.close();
    }
  }

  /**
   * Configura el tipo de negocio (arriendo/venta)
   */
  private async setBusinessType(page: any, type: string): Promise<void> {
    try {
      // Buscar el dropdown de tipo de negocio
      const businessDropdown = await page.$('pt-dropdown[element-id="typeBusiness"]');
      if (businessDropdown) {
        await businessDropdown.click();
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Buscar opci√≥n de arriendo
        const arrendOption = await page.$x(`//text()[contains(., 'arriendo') or contains(., 'Arriendo')]`);
        if (arrendOption.length > 0) {
          await arrendOption[0].click();
        }
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è No se pudo configurar tipo de negocio autom√°ticamente');
    }
  }

  /**
   * Configura la ubicaci√≥n
   */
  private async setLocation(page: any, location: string): Promise<void> {
    try {
      // Buscar el campo de ubicaci√≥n
      const locationInput = await page.$('pt-dropdown[element-id="locationType"] input');
      if (locationInput) {
        await locationInput.click();
        await locationInput.type(location);
        await new Promise(resolve => setTimeout(resolve, 2000)); // Esperar sugerencias
        
        // Presionar Enter o seleccionar primera opci√≥n
        await page.keyboard.press('Enter');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è No se pudo configurar ubicaci√≥n autom√°ticamente');
    }
  }

  /**
   * Configura el tipo de propiedad
   */
  private async setPropertyType(page: any, propertyType: string): Promise<void> {
    try {
      const propertyDropdown = await page.$('pt-dropdown-chip[element-id="typeProperty"]');
      if (propertyDropdown) {
        await propertyDropdown.click();
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Buscar la opci√≥n del tipo de propiedad
        const propertyOption = await page.$x(`//text()[contains(., '${propertyType}')]`);
        if (propertyOption.length > 0) {
          await propertyOption[0].click();
        }
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è No se pudo configurar tipo de propiedad autom√°ticamente');
    }
  }

  /**
   * Hace clic en el bot√≥n de b√∫squeda
   */
  private async clickSearch(page: any): Promise<void> {
    try {
      const searchButton = await page.$('pt-button[element-id="ptButtonSearch"]');
      if (searchButton) {
        await searchButton.click();
      } else {
        // Buscar bot√≥n alternativo
        const altButton = await page.$('button[aria-label="search"]');
        if (altButton) {
          await altButton.click();
        }
      }
    } catch (error) {
      console.error('‚ùå No se pudo hacer clic en buscar');
      throw error;
    }
  }

  /**
   * Extrae y muestra los resultados
   */
  private async extractAndDisplayResults(page: any): Promise<void> {
    try {
      // Esperar a que carguen los resultados
      await page.waitForSelector('.property-card, .listing-item, [data-testid*="property"]', { 
        timeout: 15000 
      }).catch(() => {
        console.log('‚è≥ Esperando m√°s tiempo para resultados...');
      });

      // Extraer informaci√≥n b√°sica de la p√°gina
      const pageInfo = await page.evaluate(() => {
        const title = document.title;
        const url = window.location.href;
        const resultCount = document.querySelectorAll('.property-card, .listing-item, [data-testid*="property"]').length;
        
        return { title, url, resultCount };
      });

      console.log('üìä INFORMACI√ìN DE RESULTADOS');
      console.log('=' .repeat(50));
      console.log(`üìÑ T√≠tulo de p√°gina: ${pageInfo.title}`);
      console.log(`üîó URL actual: ${pageInfo.url}`);
      console.log(`üè† Propiedades encontradas: ${pageInfo.resultCount}`);
      console.log('');

      if (pageInfo.resultCount > 0) {
        console.log('‚úÖ ¬°B√∫squeda exitosa! Se encontraron propiedades.');
        console.log('üí° Puedes ver los resultados en el navegador que se abri√≥.');
        console.log('üì± La p√°gina permanecer√° abierta por 30 segundos para que puedas revisar.');
        
        // Mantener la p√°gina abierta por un momento
        await new Promise(resolve => setTimeout(resolve, 30000));
      } else {
        console.log('‚ùå No se encontraron propiedades con los criterios especificados.');
        console.log('üí° Sugerencias:');
        console.log('   - Verifica que la ubicaci√≥n est√© bien escrita');
        console.log('   - Intenta con una ubicaci√≥n m√°s general (ej: "Bogot√°" en lugar de barrio espec√≠fico)');
        console.log('   - Revisa la p√°gina manualmente en el navegador');
      }

    } catch (error) {
      console.error('‚ùå Error extrayendo resultados:', error);
      console.log('üì± Revisa manualmente la p√°gina en el navegador que se abri√≥.');
      await new Promise(resolve => setTimeout(resolve, 15000)); // Dar tiempo para revisi√≥n manual
    }
  }
}

// Funci√≥n principal
async function main() {
  const args = process.argv.slice(2);
  
  if (args.length === 0) {
    console.log('‚ùå Error: Debes especificar una ubicaci√≥n');
    console.log('');
    console.log('üìñ USO:');
    console.log('   npm run metro-search "Chapinero"');
    console.log('   npm run metro-search "Usaqu√©n"');
    console.log('   npm run metro-search "Zona Rosa"');
    console.log('   npm run metro-search "Bogot√°"');
    console.log('');
    console.log('üí° Tambi√©n puedes especificar tipo de propiedad:');
    console.log('   npm run metro-search "Chapinero" "apartamento"');
    console.log('   npm run metro-search "Usaqu√©n" "casa"');
    process.exit(1);
  }

  const location = args[0];
  const propertyType = args[1];

  const searcher = new MetrocuadradoSimpleSearch();
  
  await searcher.searchRentals({
    location,
    propertyType
  });
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Error fatal:', error);
    process.exit(1);
  });
}

export { MetrocuadradoSimpleSearch };
